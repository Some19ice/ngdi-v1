// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
        

/// Authentication account information for OAuth providers
model Account {
  /// Unique identifier for the account
  id                String  @id @default(cuid())
  /// Reference to the user who owns this account
  userId            String
  /// Type of the account (oauth, email, etc.)
  type              String
  /// OAuth provider name
  provider          String
  /// Account ID from the provider
  providerAccountId String
  /// OAuth refresh token
  refresh_token     String?
  /// OAuth access token
  access_token      String?
  /// Token expiration timestamp
  expires_at        Int?
  /// OAuth token type
  token_type        String?
  /// OAuth scope
  scope             String?
  /// OAuth ID token
  id_token          String?
  /// OAuth session state
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

/// User session information
model Session {
  /// Unique identifier for the session
  id           String   @id @default(cuid())
  /// Session token used for authentication
  sessionToken String   @unique
  /// Reference to the user who owns this session
  userId       String
  /// Session expiration timestamp
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// User account information
model User {
  /// Unique identifier for the user
  id            String     @id @default(uuid())
  /// User's full name
  name          String?
  /// User's email address
  email         String     @unique
  /// Timestamp of email verification
  emailVerified DateTime?
  /// User's profile image URL
  image         String?
  /// Hashed password for local authentication
  password      String
  /// User's role in the system
  role          UserRole   @default(USER)
  /// User's organization name
  organization  String?
  /// User's department within the organization
  department    String?
  /// User's contact phone number
  phone         String?

  accounts      Account[]
  sessions      Session[]
  metadata      Metadata[]
  // TODO: Remove this relation after successful migration to the new Metadata model
  ngdiMetadata  NGDIMetadata[]
  drafts        Draft[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

/// User roles for access control
enum UserRole {
  /// Regular user with basic access
  USER
  /// System administrator with full access
  ADMIN
  /// Node officer with specific privileges
  NODE_OFFICER
}

/// Geospatial metadata information following NGDI standards
model Metadata {
  /// Unique identifier for the metadata entry
  id                      String   @id @default(uuid())
  
  // Legacy fields from original Metadata model
  /// Title of the dataset (legacy field - use dataName instead)
  title                   String
  /// Author of the dataset (legacy field)
  author                  String?
  /// Organization name (legacy field)
  organization            String?
  /// Start date of the dataset (legacy field)
  dateFrom               String?
  /// End date of the dataset (legacy field)
  dateTo                 String?
  /// Framework type (legacy field - use dataType instead)
  frameworkType          String?
  /// Categories of the dataset (legacy field)
  categories             String[] @default([])
  /// Number of features (legacy field)
  numFeatures           Int?
  /// Software requirements (legacy field - use technicalPrerequisites instead)
  softwareReqs          String?
  /// Update cycle (legacy field - use updateFrequency instead)
  updateCycle           String?
  /// Last update date (legacy field)
  lastUpdate            DateTime?
  /// Next update date (legacy field)
  nextUpdate            DateTime?
  
  // Form 1: General Information
  // Data Information
  /// Type of data (Raster, Vector, Table)
  dataType                String?
  /// Name of the dataset
  dataName                String
  /// Percentage of cloud cover for imagery
  cloudCoverPercentage    String?
  /// Date when the dataset was produced
  productionDate          String
  
  // Fundamental Datasets (stored as JSON)
  /// Information about fundamental dataset types
  fundamentalDatasets     Json?
  
  // Description
  /// Abstract/description of the dataset
  abstract               String? @db.Text
  /// Purpose of the dataset
  purpose                String? @db.Text
  /// URL to the thumbnail image
  thumbnailUrl           String?
  /// Name of the image file
  imageName              String?
  
  // Spatial Domain
  /// Unit system for coordinates (DD or DMS)
  coordinateUnit          String?
  /// Southernmost latitude value
  minLatitude             Float?
  /// Westernmost longitude value
  minLongitude            Float?
  /// Northernmost latitude value
  maxLatitude             Float?
  /// Easternmost longitude value
  maxLongitude            Float?
  /// Coordinate system used
  coordinateSystem       String?
  /// Projection used
  projection             String?
  /// Scale of the dataset
  scale                  Int?
  /// Resolution of the dataset
  resolution             String?
  /// Accuracy level
  accuracyLevel          String?
  /// Completeness percentage
  completeness           Int?
  /// Consistency check status
  consistencyCheck       Boolean?
  /// Validation status
  validationStatus       String?
  /// File format
  fileFormat             String?
  /// File size in bytes
  fileSize              Int?
  
  // Location
  /// Country covered by the dataset
  country                 String?
  /// Geopolitical zone within Nigeria
  geopoliticalZone        String?
  /// State or province
  state                   String?
  /// Local Government Area
  lga                     String?
  /// Town or city
  townCity                String?
  
  // Data Status
  /// Completion status (Complete or Incomplete)
  assessment              String?
  /// Frequency of updates (Monthly, Quarterly, etc.)
  updateFrequency         String?
  
  // Resource Constraint
  /// Limitations on access to the dataset
  accessConstraints       String?  @db.Text
  /// Limitations on use of the dataset
  useConstraints          String?  @db.Text
  /// Other constraints or legal prerequisites
  otherConstraints        String?  @db.Text
  /// Access restrictions
  accessRestrictions     String[] @default([])
  /// License type
  licenseType           String?
  /// Usage terms
  usageTerms             String?
  /// Attribution requirements
  attributionRequirements String?
  /// Distribution format
  distributionFormat     String?
  /// Access method
  accessMethod           String?
  /// Download URL
  downloadUrl           String?
  /// API endpoint
  apiEndpoint           String?
  
  // Metadata Reference
  /// Date when the metadata was created
  metadataCreationDate    String?
  /// Date when the metadata was last reviewed
  metadataReviewDate      String?
  /// Name of the contact person for metadata
  metadataContactName     String?
  /// Address of the contact person
  metadataContactAddress  String?  @db.Text
  /// Email of the contact person
  metadataContactEmail    String?
  /// Phone number of the contact person
  metadataContactPhone    String?
  
  // Form 2: Data Quality Information
  // General Section
  /// Report on logical consistency
  logicalConsistencyReport String?  @db.Text
  /// Report on completeness
  completenessReport      String?  @db.Text
  
  // Attribute Accuracy
  /// Report on attribute accuracy
  attributeAccuracyReport String?  @db.Text
  
  // Positional Accuracy (stored as JSON)
  /// Information about horizontal and vertical accuracy
  positionalAccuracy      Json?
  
  // Source Information (stored as JSON)
  /// Information about the source of the dataset
  sourceInformation       Json?
  
  // Data Processing Information
  /// Description of processing steps
  processingDescription   String?  @db.Text
  /// Version of software used for processing
  softwareVersion         String?
  /// Date when the data was processed
  processedDate           String?
  
  // Processor Contact Information
  /// Name of the processor
  processorName           String?
  /// Email of the processor
  processorEmail          String?
  /// Address of the processor
  processorAddress        String?  @db.Text
  
  // Form 3: Data Distribution Information
  // Distributor Information
  /// Name of the distributor
  distributorName         String?
  /// Address of the distributor
  distributorAddress      String?  @db.Text
  /// Email of the distributor
  distributorEmail        String?
  /// Phone number of the distributor
  distributorPhone        String?
  /// Website of the distributor
  distributorWebLink      String?
  /// Social media handle of the distributor
  distributorSocialMedia  String?
  /// Indicates if distributor is also the custodian
  isCustodian             Boolean? @default(true)
  /// Name of the custodian if different from distributor
  custodianName           String?
  /// Contact information for the custodian if different from distributor
  custodianContact        String?
  
  // Distribution Details
  /// Statement of liability
  distributionLiability   String?  @db.Text
  /// Process for custom orders
  customOrderProcess      String?  @db.Text
  /// Technical prerequisites for using the dataset
  technicalPrerequisites  String?  @db.Text
  
  // Standard Order Process
  /// Fees for obtaining the dataset
  fees                    String?
  /// Typical time between order and delivery
  turnaroundTime          String?
  /// Instructions for ordering the dataset
  orderingInstructions    String?  @db.Text
  /// Maximum time for response about dataset availability
  maximumResponseTime     String?
  
  // Contact details from original Metadata model
  /// Contact person
  contactPerson          String?
  /// Contact email
  email                  String?
  /// Department
  department            String?

  /// Reference to the user who created this entry
  userId                 String
  user                   User     @relation(fields: [userId], references: [id])

  /// Creation timestamp
  createdAt              DateTime @default(now())
  /// Last update timestamp
  updatedAt              DateTime @updatedAt

  @@index([userId])
}

// DEPRECATED: This model will be removed after migration to the updated Metadata model
// All references to this model should be updated to use the Metadata model instead
// TODO: Remove this model after successful migration
model NGDIMetadata {
  /// Unique identifier for the metadata entry
  id                      String   @id @default(uuid())
  
  // Form 1: General Information
  // Data Information
  /// Type of data (Raster, Vector, Table)
  dataType                String
  /// Name of the dataset
  dataName                String
  /// Percentage of cloud cover for imagery
  cloudCoverPercentage    String?
  /// Date when the dataset was produced
  productionDate          String
  
  // Fundamental Datasets (stored as JSON)
  /// Information about fundamental dataset types
  fundamentalDatasets     Json
  
  // Description
  /// Summary of the dataset's content and purpose
  abstract                String  @db.Text
  /// Reason the dataset was created
  purpose                 String  @db.Text
  /// URL to the thumbnail image
  thumbnailUrl            String
  
  // Spatial Domain
  /// Unit system for coordinates (DD or DMS)
  coordinateUnit          String
  /// Southernmost latitude value
  minLatitude             Float
  /// Westernmost longitude value
  minLongitude            Float
  /// Northernmost latitude value
  maxLatitude             Float
  /// Easternmost longitude value
  maxLongitude            Float
  
  // Location
  /// Country covered by the dataset
  country                 String
  /// Geopolitical zone within Nigeria
  geopoliticalZone        String
  /// State or province
  state                   String
  /// Local Government Area
  lga                     String
  /// Town or city
  townCity                String
  
  // Data Status
  /// Completion status (Complete or Incomplete)
  assessment              String
  /// Frequency of updates (Monthly, Quarterly, etc.)
  updateFrequency         String
  
  // Resource Constraint
  /// Limitations on access to the dataset
  accessConstraints       String  @db.Text
  /// Limitations on use of the dataset
  useConstraints          String  @db.Text
  /// Other constraints or legal prerequisites
  otherConstraints        String  @db.Text
  
  // Metadata Reference
  /// Date when the metadata was created
  metadataCreationDate    String
  /// Date when the metadata was last reviewed
  metadataReviewDate      String
  /// Name of the contact person for metadata
  metadataContactName     String
  /// Address of the contact person
  metadataContactAddress  String  @db.Text
  /// Email of the contact person
  metadataContactEmail    String
  /// Phone number of the contact person
  metadataContactPhone    String
  
  // Form 2: Data Quality Information
  // General Section
  /// Report on logical consistency
  logicalConsistencyReport String?  @db.Text
  /// Report on completeness
  completenessReport      String?  @db.Text
  
  // Attribute Accuracy
  /// Report on attribute accuracy
  attributeAccuracyReport String?  @db.Text
  
  // Positional Accuracy (stored as JSON)
  /// Information about horizontal and vertical accuracy
  positionalAccuracy      Json?
  
  // Source Information (stored as JSON)
  /// Information about the source of the dataset
  sourceInformation       Json?
  
  // Data Processing Information
  /// Description of processing steps
  processingDescription   String  @db.Text
  /// Version of software used for processing
  softwareVersion         String?
  /// Date when the data was processed
  processedDate           String
  
  // Processor Contact Information
  /// Name of the processor
  processorName           String
  /// Email of the processor
  processorEmail          String
  /// Address of the processor
  processorAddress        String  @db.Text
  
  // Form 3: Data Distribution Information
  // Distributor Information
  /// Name of the distributor
  distributorName         String
  /// Address of the distributor
  distributorAddress      String  @db.Text
  /// Email of the distributor
  distributorEmail        String
  /// Phone number of the distributor
  distributorPhone        String
  /// Website of the distributor
  distributorWebLink      String?
  /// Social media handle of the distributor
  distributorSocialMedia  String?
  /// Indicates if distributor is also the custodian
  isCustodian             Boolean @default(true)
  /// Name of the custodian if different from distributor
  custodianName           String?
  /// Contact information for the custodian if different from distributor
  custodianContact        String?
  
  // Distribution Details
  /// Statement of liability
  distributionLiability   String  @db.Text
  /// Process for custom orders
  customOrderProcess      String  @db.Text
  /// Technical prerequisites for using the dataset
  technicalPrerequisites  String  @db.Text
  
  // Standard Order Process
  /// Fees for obtaining the dataset
  fees                    String
  /// Typical time between order and delivery
  turnaroundTime          String
  /// Instructions for ordering the dataset
  orderingInstructions    String  @db.Text
  /// Maximum time for response about dataset availability
  maximumResponseTime     String
  
  // User reference
  /// Reference to the user who created this entry
  userId                  String
  user                    User     @relation(fields: [userId], references: [id])
  
  /// Creation timestamp
  createdAt               DateTime @default(now())
  /// Last update timestamp
  updatedAt               DateTime @updatedAt
  
  @@index([userId])
}

/// Token for email verification and password reset
model VerificationToken {
  /// Email or identifier to verify
  identifier String
  /// Verification token
  token      String   @unique
  /// Token expiration timestamp
  expires    DateTime

  @@unique([identifier, token])
}

/// System settings for the application
model Settings {
  /// Unique identifier for the settings record
  id                      String   @id
  /// Site name
  siteName                String
  /// Site description
  siteDescription         String
  /// Support email address
  supportEmail            String
  /// Maximum upload size in MB
  maxUploadSize           Int
  /// Default language
  defaultLanguage         String
  /// Maintenance mode flag
  maintenanceMode         Boolean  @default(false)
  /// Registration enabled flag
  enableRegistration      Boolean  @default(true)
  /// Email verification required flag
  requireEmailVerification Boolean  @default(true)
  /// Metadata validation required flag
  metadataValidation      Boolean  @default(true)
  /// Auto backup enabled flag
  autoBackup              Boolean  @default(true)
  /// Backup frequency (daily, weekly, monthly)
  backupFrequency         String
  /// Storage provider (local, s3, etc.)
  storageProvider         String
  /// API rate limit per minute
  apiRateLimit            Int
  /// Last update timestamp
  updatedAt               DateTime @updatedAt
}

/// Model for storing form drafts
model Draft {
  /// Unique identifier for the draft
  id          String   @id @default(cuid())
  /// Reference to the user who owns this draft
  userId      String
  /// Title of the draft
  title       String   @default("Untitled Draft")
  /// Draft data as JSON
  data        Json
  /// Last updated timestamp
  lastUpdated String
  /// Creation timestamp
  createdAt   DateTime @default(now())
  /// User who owns this draft
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
