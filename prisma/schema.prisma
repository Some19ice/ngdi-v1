// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
        

/// Authentication account information for OAuth providers
model Account {
  /// Unique identifier for the account
  id                String  @id @default(cuid())
  /// Reference to the user who owns this account
  userId            String
  /// Type of the account (oauth, email, etc.)
  type              String
  /// OAuth provider name
  provider          String
  /// Account ID from the provider
  providerAccountId String
  /// OAuth refresh token
  refresh_token     String? @db.Text
  /// OAuth access token
  access_token      String? @db.Text
  /// Token expiration timestamp
  expires_at        Int?
  /// OAuth token type
  token_type        String?
  /// OAuth scope
  scope             String?
  /// OAuth ID token
  id_token          String? @db.Text
  /// OAuth session state
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

/// User session information
model Session {
  /// Unique identifier for the session
  id           String   @id @default(cuid())
  /// Session token used for authentication
  sessionToken String   @unique
  /// Reference to the user who owns this session
  userId       String
  /// Session expiration timestamp
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// User account information
model User {
  /// Unique identifier for the user
  id            String    @id @default(cuid())
  /// User's full name
  name          String?
  /// User's email address
  email         String?   @unique
  /// Timestamp of email verification
  emailVerified DateTime?
  /// User's profile image URL
  image         String?
  /// Hashed password for local authentication
  password      String?
  /// User's role in the system
  role          UserRole  @default(USER)
  /// User's organization name
  organization  String?
  /// User's department within the organization
  department    String?
  /// User's contact phone number
  phone         String?
  /// Account creation timestamp
  createdAt     DateTime  @default(now())
  /// Last update timestamp
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  metadata      Metadata[]
}

/// User roles for access control
enum UserRole {
  /// System administrator with full access
  ADMIN
  /// Node officer with elevated privileges
  NODE_OFFICER
  /// Regular user with basic access
  USER
}

/// Geospatial metadata information
model Metadata {
  /// Unique identifier for the metadata entry
  id              String   @id @default(cuid())
  /// Title of the dataset
  title           String
  /// Author of the dataset
  author          String
  /// Organization that owns the dataset
  organization    String
  /// Start date of data coverage
  dateFrom        DateTime
  /// End date of data coverage
  dateTo          DateTime
  /// Detailed description of the dataset
  abstract        String   @db.Text
  /// Purpose and intended use of the dataset
  purpose         String   @db.Text
  /// URL to dataset preview image
  thumbnailUrl    String?
  /// Type of geospatial framework (vector, raster, etc.)
  frameworkType   String
  /// Dataset categories/tags
  categories      String[]

  /// Geographic coordinate system used
  coordinateSystem String
  /// Map projection used
  projection       String
  /// Map scale denominator
  scale            Float
  /// Spatial resolution of the dataset
  resolution       String?
  /// Level of spatial accuracy
  accuracyLevel    String
  /// Dataset completeness percentage
  completeness     Float?
  /// Data consistency check status
  consistency      Boolean @default(false)
  /// Data validation status
  validationStatus String?
  /// File format of the dataset
  fileFormat       String
  /// File size in megabytes
  fileSize         Float?
  /// Number of features in the dataset
  numFeatures      Int?
  /// Required software and versions
  softwareReqs     String?
  /// Update frequency cycle
  updateCycle      String?
  /// Last update timestamp
  lastUpdate       DateTime?
  /// Next scheduled update
  nextUpdate       DateTime?

  /// Format for data distribution
  distributionFormat String
  /// Primary method of data access
  accessMethod       String
  /// Direct download URL
  downloadUrl        String?
  /// API endpoint for programmatic access
  apiEndpoint        String?
  /// Type of license
  licenseType        String
  /// Terms of usage
  usageTerms         String?
  /// Attribution requirements
  attribution        String?
  /// Access restriction levels
  accessRestrictions String[]

  /// Reference to the user who created this entry
  createdBy    User      @relation(fields: [userId], references: [id])
  userId       String
  /// Creation timestamp
  createdAt    DateTime  @default(now())
  /// Last update timestamp
  updatedAt    DateTime  @updatedAt

  @@index([title])
  @@index([organization])
  @@index([frameworkType])
  @@index([categories])
}

/// Token for email verification and password reset
model VerificationToken {
  /// Email or identifier to verify
  identifier String
  /// Verification token
  token      String   @unique
  /// Token expiration timestamp
  expires    DateTime

  @@unique([identifier, token])
}
